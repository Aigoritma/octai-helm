# Default values for octai.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

###############################################
# deployment values #
################################################

replicaCount: 1

imageData:
  repository: octaidockerhub/octai-data-service
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imageCompute:
  repository: octaidockerhub/octai-compute-engine
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

image:
  repository: octaidockerhub/octai
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: test

imagePullSecrets: 
  - name: octai

# nameOverride: "data-service"
# fullnameOverride: "data-service"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

service:
  type: ClusterIP
  name: app
  port: 8080
  computePort: 80

###############################################
# ingress values #
################################################

ingress:
  enabled: true
  annotations: 
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: "customer.gw.app.octai.com"
      paths:
        - path: /
          pathType: Prefix

lifecycle: 
  preStop:
    exec:
      command: 
        - sleep
        - "5"
# envFrom:
#   - secretRef:
#       name: octai

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: 
  - name: data-pv
    persistentVolumeClaim:
      claimName: data-shared-vc-customer
  - name: cache-volume
    emptyDir: 
      medium: Memory
      sizeLimit: 500Mi

# Additional volumeMounts on the output Deployment definition.
volumeMounts: 
  - name: data-pv
    mountPath: "/data"
  - name: cache-volume
    mountPath: "/dev/shm"

nodeSelector: {}

tolerations: []

affinity: {}

########################################
# persistent volume values #
########################################
pvc:
  enabled: true
  name: data-shared-vc-customer
  accessModes:
    - ReadWriteOnce
  storageClassName: data-shared-vc-customer
  storageSize: 100Gi

########################################
# storage class values #
########################################
storageClass:
  enabled: true
  name: data-shared-vc-customer
  provisioner: kubernetes.io/aws-ebs
  type: gp2
  fsType: ext4
  volumeBindingMode: WaitForFirstConsumer
  allowVolumeExpansion: true
  reclaimPolicy: Delete

########################################
# secret values #
########################################
secretPath: octai/data-service/env

###############################################
# reloader values #
################################################
# reloader:
#   enabled: false
#   reloader:
#     watchGlobally: true

##################################################
# ingress-nginx dependency values #
##################################################
# ingress-nginx:
#   enabled: false
#   defaultBackend:
#     enabled: false
#   controller:
#     ingressClass: nginx
#     replicaCount: 1
#     containerPort:
#       http: 80
#       https: 443
#       tohttps: 2443
#     ingressClassResource:
#       name: nginx
#       enabled: true
#       default: false
#       controllerValue: "k8s.io/nginx"
#     config:
#       client-body-buffer-size: "10m"
#       proxy-body-size: "16384m"
#       proxy-send-timeout: "300"
#       proxy-read-timeout: "300"
#       set-real-ip-from: "0.0.0.0/0"
#       keep-alive: "600"
#       keep-alive-requests: "1000"
#       use-http2: true
#       http-snippet: |
#         server {
#           listen 2443;
#           return 308 https://$host$request_uri;
#           }
#       service:
#         externalTrafficPolicy: "Local"
#         targetPorts:
#           http: tohttps
#           https: http
#         annotations:
#           service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:935982831076:certificate/34af66bc-88b0-41b0-881e-7c4ba3a60012
#           service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
#           service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
#           service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
#           service.beta.kubernetes.io/aws-load-balancer-type: nlb
#           service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
#           service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '3600'
#         internal:
#           enabled: true

##################################################
# kubernetes-external-secrets dependency values #
##################################################
# kubernetes-external-secrets:
#   enabled: false
#   env: 
#     AWS_REGION: us-east-1
#     METRICS_PORT: 3001
#     WATCH_TIMEOUT: 90000
#     USE_HUMAN_READABLE_LOG_LEVELS: true
#     LOG_LEVEL: error
#   securityContext:
#     fsGroup: 65534


##################################################
# datadog dependency values #
##################################################
datadog:
  enabled: false
  targetSystem: "linux"
  datadog:
    processAgent:
      enabled: true
      processCollection: true
    apm:
      enabled: true
      socketEnabled: true
    site: datadoghq.com
    clustername: "octai-cluster-test"
    apiKeyExistingSecret: datadog-secret
    kubeStateMetricsEnabled: true
    kubeStateMetricCore:
      enabled: true
      ignoreLegacyKSMCheck: true
    containerExclude: "name:.*"
    containerInclude: "name:^data-service.*"
    logs:
      enabled: true
      containerCollectAll: true
      containerCollectUsingFiles: true
      autoMultiLineDetection: true
      prometheusScrape:
        enabled: true

##################################################
# cloudflared dependency values #
##################################################

# cloudflared:
#   enabled: false
#   applicationName: cloudflared-octai
#   replicaCount: 1
#   containerResources:
#     requests:
#       cpu: "1"
#       memory: "1024Mi"
#     limits:
#       cpu: "1"
#       memory: "1024Mi"
#   service:
#     enabled: false
#   ingress:
#     enabled: false
#   containerImage:
#     repository: cloudflare/cloudflared
#     tag: 2022.5.0
#     pullPolicy: Always
#   containerCommand:
#     - "cloudflared"
#     - "--no-autoupdate"
#     - "tunnel"
#     - "--config"
#     - "/etc/cloudflared/config/config.yaml"
#     - "run"
#   configMaps:
#     tunnelcert:
#       as: volume
#       subPath: cert.pem
#       mountPath: /etc/cloudflared/cert.pem
#     credentials:
#       as: volume
#       subPath: credentials.json
#       mountPath: /etc/cloudflared/creds/credentials.json
#     cloudflared: 
#       as: volume
#       mountPath: /etc/cloudflared/config
#       items:
#         config.yaml:
#           filePath: config.yaml
#   customResources:
#     enabled: true
#     resources:
#       cloudflared_configmap: |
#         apiVersion: v1
#         kind: ConfigMap
#         metadata:
#           name: cloudflared
#         data:
#           config.yaml: |
#             # Name of the tunnel you want to run
#             tunnel: ai-int-customer
#             credentials-file: /etc/cloudflared/creds/credentials.json
#             # Serves the metrics server under /metrics and the readiness server under /ready
#             metrics: 0.0.0.0:2000
#             # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
#             # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
#             # recommend using autoupdate.
#             no-autoupdate: true
#             # The `ingress` block tells cloudflared which local service to route
#             # requests to. For more about ingress rules, see
#             # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
#             #
#             # Remember, these rules route traffic from cloudflared to a local service. To route traffic
#             # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
#             # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
#             ingress: 
#               # The first rule proxies traffic to the httpbin sample Service defined in app.yaml
#               - hostname: customer.ai-int.com
#                 service: http://octai.default.svc.cluster.local:8080
#               - hostname: customer.ai-int.com
#                 originRequest:
#                   bastionMode: true
#               - service: http_status:404

            
##################################################
# mongodb dependency values #
##################################################

mongodb:
  enabled: true
  applicationName: mongodb-octai
  deploymentAnnotations:
    reloader.stakater.com/auto: "true"
  auth:
    enabled: true
    rootUser: octai-root
    rootPassword: octai-password
    usernames:
      - octai-mongo
    passwords:
      - octai-password
    databases:
      - octai-data
  resources:
    limits:
      cpu: "0.5"
      memory: 512Mi
    requests:
      cpu: "0.5"
      memory: 512Mi
  architecture: "standalone"
  service:
    nameOverride: "mongodb"
  
