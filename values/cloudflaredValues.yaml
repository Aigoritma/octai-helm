applicationName: cloudflared-octai
replicaCount: 1
containerResources:
  requests:
    cpu: "1"
    memory: "1024Mi"
  limits:
    cpu: "1"
    memory: "1024Mi"
service:
  enabled: false
ingress:
  enabled: false
containerImage:
  repository: cloudflare/cloudflared
  tag: 2022.5.0
  pullPolicy: Always
containerCommand:
  - "cloudflared"
  - "--no-autoupdate"
  - "tunnel"
  - "--config"
  - "/etc/cloudflared/config/config.yaml"
  - "run"
configMaps:
  tunnelcert:
    as: volume
    subPath: cert.pem
    mountPath: /etc/cloudflared/cert.pem
  credentials:
    as: volume
    subPath: credentials.json
    mountPath: /etc/cloudflared/creds/credentials.json
  cloudflared: 
    as: volume
    mountPath: /etc/cloudflared/config
    items:
      config.yaml:
        filePath: config.yaml
customResources:
  enabled: true
  resources:
    cloudflared_configmap: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cloudflared
      data:
        config.yaml: |
          # Name of the tunnel you want to run
          tunnel: ai-int-customer
          credentials-file: /etc/cloudflared/creds/credentials.json
          # Serves the metrics server under /metrics and the readiness server under /ready
          metrics: 0.0.0.0:2000
          # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
          # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
          # recommend using autoupdate.
          no-autoupdate: true
          # The `ingress` block tells cloudflared which local service to route
          # requests to. For more about ingress rules, see
          # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
          #
          # Remember, these rules route traffic from cloudflared to a local service. To route traffic
          # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
          # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
          ingress: 
            # The first rule proxies traffic to the httpbin sample Service defined in app.yaml
            - hostname: customer.ai-int.com
              service: http://octai.default.svc.cluster.local:8080
            - hostname: customer.ai-int.com
              originRequest:
                bastionMode: true
            - service: http_status:404